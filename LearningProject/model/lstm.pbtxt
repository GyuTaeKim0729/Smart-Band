node {
  name: "fingerprint_input"
  op: "Placeholder"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 192
        }
      }
    }
  }
}
node {
  name: "dropout_prob"
  op: "Placeholder"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\006\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "fingerprint_input"
  input: "Reshape/shape"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/Rank"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/range/start"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/range/delta"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/range"
  op: "Range"
  input: "LSTM-Layer/lstm/rnn/range/start"
  input: "LSTM-Layer/lstm/rnn/Rank"
  input: "LSTM-Layer/lstm/rnn/range/delta"
  device: "/device:GPU:1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/concat/values_0"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/concat/axis"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/concat"
  op: "ConcatV2"
  input: "LSTM-Layer/lstm/rnn/concat/values_0"
  input: "LSTM-Layer/lstm/rnn/range"
  input: "LSTM-Layer/lstm/rnn/concat/axis"
  device: "/device:GPU:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/transpose"
  op: "Transpose"
  input: "Reshape"
  input: "LSTM-Layer/lstm/rnn/concat"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/Shape"
  op: "Shape"
  input: "LSTM-Layer/lstm/rnn/transpose"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/strided_slice/stack"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/strided_slice/stack_1"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/strided_slice/stack_2"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/strided_slice"
  op: "StridedSlice"
  input: "LSTM-Layer/lstm/rnn/Shape"
  input: "LSTM-Layer/lstm/rnn/strided_slice/stack"
  input: "LSTM-Layer/lstm/rnn/strided_slice/stack_1"
  input: "LSTM-Layer/lstm/rnn/strided_slice/stack_2"
  device: "/device:GPU:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/ExpandDims/dim"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "LSTM-Layer/lstm/rnn/strided_slice"
  input: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/ExpandDims/dim"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/Const"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/concat/axis"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/ExpandDims"
  input: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/Const"
  input: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/concat/axis"
  device: "/device:GPU:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/zeros/Const"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/zeros"
  op: "Fill"
  input: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/concat"
  input: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/zeros/Const"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/ExpandDims_1/dim"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "LSTM-Layer/lstm/rnn/strided_slice"
  input: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/ExpandDims_1/dim"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/Const_1"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/ExpandDims_2/dim"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "LSTM-Layer/lstm/rnn/strided_slice"
  input: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/ExpandDims_2/dim"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/Const_2"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/concat_1/axis"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/ExpandDims_2"
  input: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/Const_2"
  input: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/concat_1/axis"
  device: "/device:GPU:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/concat_1"
  input: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/zeros_1/Const"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/ExpandDims_3/dim"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "LSTM-Layer/lstm/rnn/strided_slice"
  input: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/ExpandDims_3/dim"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/Const_3"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/Shape_1"
  op: "Shape"
  input: "LSTM-Layer/lstm/rnn/transpose"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/strided_slice_1/stack"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/strided_slice_1"
  op: "StridedSlice"
  input: "LSTM-Layer/lstm/rnn/Shape_1"
  input: "LSTM-Layer/lstm/rnn/strided_slice_1/stack"
  input: "LSTM-Layer/lstm/rnn/strided_slice_1/stack_1"
  input: "LSTM-Layer/lstm/rnn/strided_slice_1/stack_2"
  device: "/device:GPU:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/Shape_2"
  op: "Shape"
  input: "LSTM-Layer/lstm/rnn/transpose"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/strided_slice_2/stack"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/strided_slice_2"
  op: "StridedSlice"
  input: "LSTM-Layer/lstm/rnn/Shape_2"
  input: "LSTM-Layer/lstm/rnn/strided_slice_2/stack"
  input: "LSTM-Layer/lstm/rnn/strided_slice_2/stack_1"
  input: "LSTM-Layer/lstm/rnn/strided_slice_2/stack_2"
  device: "/device:GPU:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/ExpandDims/dim"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/ExpandDims"
  op: "ExpandDims"
  input: "LSTM-Layer/lstm/rnn/strided_slice_2"
  input: "LSTM-Layer/lstm/rnn/ExpandDims/dim"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/Const"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/concat_1/axis"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/concat_1"
  op: "ConcatV2"
  input: "LSTM-Layer/lstm/rnn/ExpandDims"
  input: "LSTM-Layer/lstm/rnn/Const"
  input: "LSTM-Layer/lstm/rnn/concat_1/axis"
  device: "/device:GPU:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/zeros/Const"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/zeros"
  op: "Fill"
  input: "LSTM-Layer/lstm/rnn/concat_1"
  input: "LSTM-Layer/lstm/rnn/zeros/Const"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/time"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/TensorArray"
  op: "TensorArrayV3"
  input: "LSTM-Layer/lstm/rnn/strided_slice_1"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "LSTM-Layer/lstm/rnn/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/TensorArray_1"
  op: "TensorArrayV3"
  input: "LSTM-Layer/lstm/rnn/strided_slice_1"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "LSTM-Layer/lstm/rnn/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "LSTM-Layer/lstm/rnn/transpose"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "LSTM-Layer/lstm/rnn/TensorArrayUnstack/Shape"
  input: "LSTM-Layer/lstm/rnn/TensorArrayUnstack/strided_slice/stack"
  input: "LSTM-Layer/lstm/rnn/TensorArrayUnstack/strided_slice/stack_1"
  input: "LSTM-Layer/lstm/rnn/TensorArrayUnstack/strided_slice/stack_2"
  device: "/device:GPU:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/TensorArrayUnstack/range/start"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/TensorArrayUnstack/range/delta"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/TensorArrayUnstack/range"
  op: "Range"
  input: "LSTM-Layer/lstm/rnn/TensorArrayUnstack/range/start"
  input: "LSTM-Layer/lstm/rnn/TensorArrayUnstack/strided_slice"
  input: "LSTM-Layer/lstm/rnn/TensorArrayUnstack/range/delta"
  device: "/device:GPU:1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "LSTM-Layer/lstm/rnn/TensorArray_1"
  input: "LSTM-Layer/lstm/rnn/TensorArrayUnstack/range"
  input: "LSTM-Layer/lstm/rnn/transpose"
  input: "LSTM-Layer/lstm/rnn/TensorArray_1:1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/transpose"
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/Maximum/x"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/Maximum"
  op: "Maximum"
  input: "LSTM-Layer/lstm/rnn/Maximum/x"
  input: "LSTM-Layer/lstm/rnn/strided_slice_1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/Minimum"
  op: "Minimum"
  input: "LSTM-Layer/lstm/rnn/strided_slice_1"
  input: "LSTM-Layer/lstm/rnn/Maximum"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/iteration_counter"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Enter"
  op: "Enter"
  input: "LSTM-Layer/lstm/rnn/while/iteration_counter"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Enter_1"
  op: "Enter"
  input: "LSTM-Layer/lstm/rnn/time"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Enter_2"
  op: "Enter"
  input: "LSTM-Layer/lstm/rnn/TensorArray:1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Enter_3"
  op: "Enter"
  input: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/zeros"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Enter_4"
  op: "Enter"
  input: "LSTM-Layer/lstm/rnn/LSTMCellZeroState/zeros_1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Merge"
  op: "Merge"
  input: "LSTM-Layer/lstm/rnn/while/Enter"
  input: "LSTM-Layer/lstm/rnn/while/NextIteration"
  device: "/device:GPU:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Merge_1"
  op: "Merge"
  input: "LSTM-Layer/lstm/rnn/while/Enter_1"
  input: "LSTM-Layer/lstm/rnn/while/NextIteration_1"
  device: "/device:GPU:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Merge_2"
  op: "Merge"
  input: "LSTM-Layer/lstm/rnn/while/Enter_2"
  input: "LSTM-Layer/lstm/rnn/while/NextIteration_2"
  device: "/device:GPU:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Merge_3"
  op: "Merge"
  input: "LSTM-Layer/lstm/rnn/while/Enter_3"
  input: "LSTM-Layer/lstm/rnn/while/NextIteration_3"
  device: "/device:GPU:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Merge_4"
  op: "Merge"
  input: "LSTM-Layer/lstm/rnn/while/Enter_4"
  input: "LSTM-Layer/lstm/rnn/while/NextIteration_4"
  device: "/device:GPU:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Less"
  op: "Less"
  input: "LSTM-Layer/lstm/rnn/while/Merge"
  input: "LSTM-Layer/lstm/rnn/while/Less/Enter"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Less/Enter"
  op: "Enter"
  input: "LSTM-Layer/lstm/rnn/strided_slice_1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Less_1"
  op: "Less"
  input: "LSTM-Layer/lstm/rnn/while/Merge_1"
  input: "LSTM-Layer/lstm/rnn/while/Less_1/Enter"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Less_1/Enter"
  op: "Enter"
  input: "LSTM-Layer/lstm/rnn/Minimum"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/LogicalAnd"
  op: "LogicalAnd"
  input: "LSTM-Layer/lstm/rnn/while/Less"
  input: "LSTM-Layer/lstm/rnn/while/Less_1"
  device: "/device:GPU:1"
}
node {
  name: "LSTM-Layer/lstm/rnn/while/LoopCond"
  op: "LoopCond"
  input: "LSTM-Layer/lstm/rnn/while/LogicalAnd"
  device: "/device:GPU:1"
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Switch"
  op: "Switch"
  input: "LSTM-Layer/lstm/rnn/while/Merge"
  input: "LSTM-Layer/lstm/rnn/while/LoopCond"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/Merge"
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Switch_1"
  op: "Switch"
  input: "LSTM-Layer/lstm/rnn/while/Merge_1"
  input: "LSTM-Layer/lstm/rnn/while/LoopCond"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/Merge_1"
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Switch_2"
  op: "Switch"
  input: "LSTM-Layer/lstm/rnn/while/Merge_2"
  input: "LSTM-Layer/lstm/rnn/while/LoopCond"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/Merge_2"
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Switch_3"
  op: "Switch"
  input: "LSTM-Layer/lstm/rnn/while/Merge_3"
  input: "LSTM-Layer/lstm/rnn/while/LoopCond"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/Merge_3"
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Switch_4"
  op: "Switch"
  input: "LSTM-Layer/lstm/rnn/while/Merge_4"
  input: "LSTM-Layer/lstm/rnn/while/LoopCond"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/Merge_4"
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Identity"
  op: "Identity"
  input: "LSTM-Layer/lstm/rnn/while/Switch:1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Identity_1"
  op: "Identity"
  input: "LSTM-Layer/lstm/rnn/while/Switch_1:1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Identity_2"
  op: "Identity"
  input: "LSTM-Layer/lstm/rnn/while/Switch_2:1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Identity_3"
  op: "Identity"
  input: "LSTM-Layer/lstm/rnn/while/Switch_3:1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Identity_4"
  op: "Identity"
  input: "LSTM-Layer/lstm/rnn/while/Switch_4:1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/add/y"
  op: "Const"
  input: "^LSTM-Layer/lstm/rnn/while/Identity"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/add"
  op: "Add"
  input: "LSTM-Layer/lstm/rnn/while/Identity"
  input: "LSTM-Layer/lstm/rnn/while/add/y"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "LSTM-Layer/lstm/rnn/while/TensorArrayReadV3/Enter"
  input: "LSTM-Layer/lstm/rnn/while/Identity_1"
  input: "LSTM-Layer/lstm/rnn/while/TensorArrayReadV3/Enter_1"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "LSTM-Layer/lstm/rnn/TensorArray_1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "LSTM-Layer/lstm/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "$\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3396831154823303
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3396831154823303
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm/rnn/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "lstm/rnn/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "lstm/rnn/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "lstm/rnn/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "lstm/rnn/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "lstm/rnn/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "lstm/rnn/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/kernel"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 36
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/kernel"
  input: "lstm/rnn/lstm_cell/kernel/Initializer/random_uniform"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/kernel/read"
  op: "Identity"
  input: "lstm/rnn/lstm_cell/kernel"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/bias"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/bias/Assign"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/bias"
  input: "lstm/rnn/lstm_cell/bias/Initializer/zeros"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/bias/read"
  op: "Identity"
  input: "lstm/rnn/lstm_cell/bias"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_f_diag/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_f_diag"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_f_diag/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_f_diag"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.8660253882408142
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_f_diag/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_f_diag"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8660253882408142
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_f_diag/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm/rnn/lstm_cell/w_f_diag/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_f_diag"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_f_diag/Initializer/random_uniform/sub"
  op: "Sub"
  input: "lstm/rnn/lstm_cell/w_f_diag/Initializer/random_uniform/max"
  input: "lstm/rnn/lstm_cell/w_f_diag/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_f_diag"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_f_diag/Initializer/random_uniform/mul"
  op: "Mul"
  input: "lstm/rnn/lstm_cell/w_f_diag/Initializer/random_uniform/RandomUniform"
  input: "lstm/rnn/lstm_cell/w_f_diag/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_f_diag"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_f_diag/Initializer/random_uniform"
  op: "Add"
  input: "lstm/rnn/lstm_cell/w_f_diag/Initializer/random_uniform/mul"
  input: "lstm/rnn/lstm_cell/w_f_diag/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_f_diag"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_f_diag"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_f_diag"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_f_diag/Assign"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/w_f_diag"
  input: "lstm/rnn/lstm_cell/w_f_diag/Initializer/random_uniform"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_f_diag"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_f_diag/read"
  op: "Identity"
  input: "lstm/rnn/lstm_cell/w_f_diag"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_i_diag/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_i_diag"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_i_diag/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_i_diag"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.8660253882408142
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_i_diag/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_i_diag"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8660253882408142
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_i_diag/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm/rnn/lstm_cell/w_i_diag/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_i_diag"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_i_diag/Initializer/random_uniform/sub"
  op: "Sub"
  input: "lstm/rnn/lstm_cell/w_i_diag/Initializer/random_uniform/max"
  input: "lstm/rnn/lstm_cell/w_i_diag/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_i_diag"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_i_diag/Initializer/random_uniform/mul"
  op: "Mul"
  input: "lstm/rnn/lstm_cell/w_i_diag/Initializer/random_uniform/RandomUniform"
  input: "lstm/rnn/lstm_cell/w_i_diag/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_i_diag"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_i_diag/Initializer/random_uniform"
  op: "Add"
  input: "lstm/rnn/lstm_cell/w_i_diag/Initializer/random_uniform/mul"
  input: "lstm/rnn/lstm_cell/w_i_diag/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_i_diag"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_i_diag"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_i_diag"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_i_diag/Assign"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/w_i_diag"
  input: "lstm/rnn/lstm_cell/w_i_diag/Initializer/random_uniform"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_i_diag"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_i_diag/read"
  op: "Identity"
  input: "lstm/rnn/lstm_cell/w_i_diag"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_o_diag/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_o_diag"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_o_diag/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_o_diag"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.8660253882408142
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_o_diag/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_o_diag"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8660253882408142
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_o_diag/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm/rnn/lstm_cell/w_o_diag/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_o_diag"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_o_diag/Initializer/random_uniform/sub"
  op: "Sub"
  input: "lstm/rnn/lstm_cell/w_o_diag/Initializer/random_uniform/max"
  input: "lstm/rnn/lstm_cell/w_o_diag/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_o_diag"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_o_diag/Initializer/random_uniform/mul"
  op: "Mul"
  input: "lstm/rnn/lstm_cell/w_o_diag/Initializer/random_uniform/RandomUniform"
  input: "lstm/rnn/lstm_cell/w_o_diag/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_o_diag"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_o_diag/Initializer/random_uniform"
  op: "Add"
  input: "lstm/rnn/lstm_cell/w_o_diag/Initializer/random_uniform/mul"
  input: "lstm/rnn/lstm_cell/w_o_diag/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_o_diag"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_o_diag"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_o_diag"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_o_diag/Assign"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/w_o_diag"
  input: "lstm/rnn/lstm_cell/w_o_diag/Initializer/random_uniform"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_o_diag"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_o_diag/read"
  op: "Identity"
  input: "lstm/rnn/lstm_cell/w_o_diag"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/projection/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/projection/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/projection/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/projection/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.8660253882408142
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/projection/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/projection/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8660253882408142
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/projection/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm/rnn/lstm_cell/projection/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/projection/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/projection/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "lstm/rnn/lstm_cell/projection/kernel/Initializer/random_uniform/max"
  input: "lstm/rnn/lstm_cell/projection/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/projection/kernel"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/projection/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "lstm/rnn/lstm_cell/projection/kernel/Initializer/random_uniform/RandomUniform"
  input: "lstm/rnn/lstm_cell/projection/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/projection/kernel"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/projection/kernel/Initializer/random_uniform"
  op: "Add"
  input: "lstm/rnn/lstm_cell/projection/kernel/Initializer/random_uniform/mul"
  input: "lstm/rnn/lstm_cell/projection/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/projection/kernel"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/projection/kernel"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/projection/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/projection/kernel/Assign"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/projection/kernel"
  input: "lstm/rnn/lstm_cell/projection/kernel/Initializer/random_uniform"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/projection/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/projection/kernel/read"
  op: "Identity"
  input: "lstm/rnn/lstm_cell/projection/kernel"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/concat/axis"
  op: "Const"
  input: "^LSTM-Layer/lstm/rnn/while/Identity"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/concat"
  op: "ConcatV2"
  input: "LSTM-Layer/lstm/rnn/while/TensorArrayReadV3"
  input: "LSTM-Layer/lstm/rnn/while/Identity_4"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/concat/axis"
  device: "/device:GPU:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul"
  op: "MatMul"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/concat"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul/Enter"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "lstm/rnn/lstm_cell/kernel/read"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd/Enter"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "lstm/rnn/lstm_cell/bias/read"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/Const"
  op: "Const"
  input: "^LSTM-Layer/lstm/rnn/while/Identity"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/split/split_dim"
  op: "Const"
  input: "^LSTM-Layer/lstm/rnn/while/Identity"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/split"
  op: "Split"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/split/split_dim"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/add/y"
  op: "Const"
  input: "^LSTM-Layer/lstm/rnn/while/Identity"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/add"
  op: "Add"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/split:2"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/add/y"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/mul"
  op: "Mul"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/mul/Enter"
  input: "LSTM-Layer/lstm/rnn/while/Identity_3"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/mul/Enter"
  op: "Enter"
  input: "lstm/rnn/lstm_cell/w_f_diag/read"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/add_1"
  op: "Add"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/add"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/mul"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/add_1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1"
  op: "Mul"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid"
  input: "LSTM-Layer/lstm/rnn/while/Identity_3"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2"
  op: "Mul"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2/Enter"
  input: "LSTM-Layer/lstm/rnn/while/Identity_3"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2/Enter"
  op: "Enter"
  input: "lstm/rnn/lstm_cell/w_i_diag/read"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/add_2"
  op: "Add"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/split"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/add_2"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/Tanh"
  op: "Tanh"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/split:1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3"
  op: "Mul"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid_1"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/Tanh"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/add_3"
  op: "Add"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4"
  op: "Mul"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4/Enter"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/add_3"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4/Enter"
  op: "Enter"
  input: "lstm/rnn/lstm_cell/w_o_diag/read"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/add_4"
  op: "Add"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/split:3"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/add_4"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/add_3"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5"
  op: "Mul"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid_2"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/Tanh_1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1"
  op: "MatMul"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1/Enter"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1/Enter"
  op: "Enter"
  input: "lstm/rnn/lstm_cell/projection/kernel/read"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "LSTM-Layer/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "LSTM-Layer/lstm/rnn/while/Identity_1"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1"
  input: "LSTM-Layer/lstm/rnn/while/Identity_2"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1"
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "LSTM-Layer/lstm/rnn/TensorArray"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/add_1/y"
  op: "Const"
  input: "^LSTM-Layer/lstm/rnn/while/Identity"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/add_1"
  op: "Add"
  input: "LSTM-Layer/lstm/rnn/while/Identity_1"
  input: "LSTM-Layer/lstm/rnn/while/add_1/y"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/NextIteration"
  op: "NextIteration"
  input: "LSTM-Layer/lstm/rnn/while/add"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/NextIteration_1"
  op: "NextIteration"
  input: "LSTM-Layer/lstm/rnn/while/add_1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/NextIteration_2"
  op: "NextIteration"
  input: "LSTM-Layer/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/NextIteration_3"
  op: "NextIteration"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/add_3"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/NextIteration_4"
  op: "NextIteration"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Exit"
  op: "Exit"
  input: "LSTM-Layer/lstm/rnn/while/Switch"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Exit_1"
  op: "Exit"
  input: "LSTM-Layer/lstm/rnn/while/Switch_1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Exit_2"
  op: "Exit"
  input: "LSTM-Layer/lstm/rnn/while/Switch_2"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Exit_3"
  op: "Exit"
  input: "LSTM-Layer/lstm/rnn/while/Switch_3"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/while/Exit_4"
  op: "Exit"
  input: "LSTM-Layer/lstm/rnn/while/Switch_4"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "LSTM-Layer/lstm/rnn/TensorArray"
  input: "LSTM-Layer/lstm/rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/TensorArray"
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/TensorArrayStack/range"
  op: "Range"
  input: "LSTM-Layer/lstm/rnn/TensorArrayStack/range/start"
  input: "LSTM-Layer/lstm/rnn/TensorArrayStack/TensorArraySizeV3"
  input: "LSTM-Layer/lstm/rnn/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/TensorArray"
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "LSTM-Layer/lstm/rnn/TensorArray"
  input: "LSTM-Layer/lstm/rnn/TensorArrayStack/range"
  input: "LSTM-Layer/lstm/rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 4
        }
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/Const_1"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/Rank_1"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/range_1/start"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/range_1/delta"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/range_1"
  op: "Range"
  input: "LSTM-Layer/lstm/rnn/range_1/start"
  input: "LSTM-Layer/lstm/rnn/Rank_1"
  input: "LSTM-Layer/lstm/rnn/range_1/delta"
  device: "/device:GPU:1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/concat_2/values_0"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/concat_2/axis"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/concat_2"
  op: "ConcatV2"
  input: "LSTM-Layer/lstm/rnn/concat_2/values_0"
  input: "LSTM-Layer/lstm/rnn/range_1"
  input: "LSTM-Layer/lstm/rnn/concat_2/axis"
  device: "/device:GPU:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM-Layer/lstm/rnn/transpose_1"
  op: "Transpose"
  input: "LSTM-Layer/lstm/rnn/TensorArrayStack/TensorArrayGatherV3"
  input: "LSTM-Layer/lstm/rnn/concat_2"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "W_o/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "W_o/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.8660253882408142
      }
    }
  }
}
node {
  name: "W_o/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8660253882408142
      }
    }
  }
}
node {
  name: "W_o/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "W_o/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "W_o/Initializer/random_uniform/sub"
  op: "Sub"
  input: "W_o/Initializer/random_uniform/max"
  input: "W_o/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
}
node {
  name: "W_o/Initializer/random_uniform/mul"
  op: "Mul"
  input: "W_o/Initializer/random_uniform/RandomUniform"
  input: "W_o/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
}
node {
  name: "W_o/Initializer/random_uniform"
  op: "Add"
  input: "W_o/Initializer/random_uniform/mul"
  input: "W_o/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
}
node {
  name: "W_o"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "W_o/Assign"
  op: "Assign"
  input: "W_o"
  input: "W_o/Initializer/random_uniform"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "W_o/read"
  op: "Identity"
  input: "W_o"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
}
node {
  name: "b_o/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b_o"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "b_o/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b_o"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.8660253882408142
      }
    }
  }
}
node {
  name: "b_o/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b_o"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8660253882408142
      }
    }
  }
}
node {
  name: "b_o/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "b_o/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b_o"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "b_o/Initializer/random_uniform/sub"
  op: "Sub"
  input: "b_o/Initializer/random_uniform/max"
  input: "b_o/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b_o"
      }
    }
  }
}
node {
  name: "b_o/Initializer/random_uniform/mul"
  op: "Mul"
  input: "b_o/Initializer/random_uniform/RandomUniform"
  input: "b_o/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b_o"
      }
    }
  }
}
node {
  name: "b_o/Initializer/random_uniform"
  op: "Add"
  input: "b_o/Initializer/random_uniform/mul"
  input: "b_o/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b_o"
      }
    }
  }
}
node {
  name: "b_o"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b_o"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "b_o/Assign"
  op: "Assign"
  input: "b_o"
  input: "b_o/Initializer/random_uniform"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b_o"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "b_o/read"
  op: "Identity"
  input: "b_o"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b_o"
      }
    }
  }
}
node {
  name: "Output-Layer/MatMul"
  op: "MatMul"
  input: "LSTM-Layer/lstm/rnn/while/Exit_4"
  input: "W_o/read"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Output-Layer/add"
  op: "Add"
  input: "Output-Layer/MatMul"
  input: "b_o/read"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "groundtruth_input"
  op: "Placeholder"
  device: "/device:GPU:1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 4
        }
      }
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/labels_stop_gradient"
  op: "StopGradient"
  input: "groundtruth_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/Shape"
  op: "Shape"
  input: "Output-Layer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/Shape_1"
  op: "Shape"
  input: "Output-Layer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/Sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/Sub"
  op: "Sub"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Rank_1"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/Slice/begin"
  op: "Pack"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Sub"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/Slice"
  op: "Slice"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Shape_1"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Slice/begin"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/concat"
  op: "ConcatV2"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/concat/values_0"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Slice"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/Reshape"
  op: "Reshape"
  input: "Output-Layer/add"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/Shape_2"
  op: "Shape"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/labels_stop_gradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/Sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/Sub_1"
  op: "Sub"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Rank_2"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/Slice_1/begin"
  op: "Pack"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Sub_1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/Slice_1"
  op: "Slice"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Shape_2"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Slice_1/begin"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/concat_1/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/concat_1"
  op: "ConcatV2"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/concat_1/values_0"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Slice_1"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/Reshape_1"
  op: "Reshape"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/labels_stop_gradient"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg"
  op: "SoftmaxCrossEntropyWithLogits"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Reshape"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/Sub_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/Sub_2"
  op: "Sub"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Rank"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Sub_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/Slice_2/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/Slice_2/size"
  op: "Pack"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Sub_2"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/Slice_2"
  op: "Slice"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Shape"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Slice_2/begin"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cross_entropy/softmax_cross_entropy_with_logits_sg/Reshape_2"
  op: "Reshape"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cross_entropy/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cross_entropy/Mean"
  op: "Mean"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Reshape_2"
  input: "cross_entropy/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cross_entropy_1/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "cross_entropy_1"
      }
    }
  }
}
node {
  name: "cross_entropy_1"
  op: "ScalarSummary"
  input: "cross_entropy_1/tags"
  input: "cross_entropy/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/learning_rate_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
}
node {
  name: "train/gradients/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "train/gradients/Fill"
  op: "Fill"
  input: "train/gradients/Shape"
  input: "train/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/f_count"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train/gradients/f_count_1"
  op: "Enter"
  input: "train/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/Merge"
  op: "Merge"
  input: "train/gradients/f_count_1"
  input: "train/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/Switch"
  op: "Switch"
  input: "train/gradients/Merge"
  input: "LSTM-Layer/lstm/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/Add/y"
  op: "Const"
  input: "^LSTM-Layer/lstm/rnn/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/Add"
  op: "Add"
  input: "train/gradients/Switch:1"
  input: "train/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/NextIteration"
  op: "NextIteration"
  input: "train/gradients/Add"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul_1/StackPushV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/StackPushV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/StackPushV2_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul/StackPushV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul_1/StackPushV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Mul/StackPushV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul/StackPushV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul_1/StackPushV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/f_count_2"
  op: "Exit"
  input: "train/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/b_count"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/b_count_1"
  op: "Enter"
  input: "train/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/Merge_1"
  op: "Merge"
  input: "train/gradients/b_count_1"
  input: "train/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "train/gradients/Merge_1"
  input: "train/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "train/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/b_count_2"
  op: "LoopCond"
  input: "train/gradients/GreaterEqual"
}
node {
  name: "train/gradients/Switch_1"
  op: "Switch"
  input: "train/gradients/Merge_1"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/Sub"
  op: "Sub"
  input: "train/gradients/Switch_1:1"
  input: "train/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/NextIteration_1"
  op: "NextIteration"
  input: "train/gradients/Sub"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul_1/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/b_count_3"
  op: "Exit"
  input: "train/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/cross_entropy/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/cross_entropy/Mean_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/Fill"
  input: "train/gradients/cross_entropy/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/cross_entropy/Mean_grad/Shape"
  op: "Shape"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/cross_entropy/Mean_grad/Tile"
  op: "Tile"
  input: "train/gradients/cross_entropy/Mean_grad/Reshape"
  input: "train/gradients/cross_entropy/Mean_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/cross_entropy/Mean_grad/Shape_1"
  op: "Shape"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/cross_entropy/Mean_grad/Shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/cross_entropy/Mean_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train/gradients/cross_entropy/Mean_grad/Prod"
  op: "Prod"
  input: "train/gradients/cross_entropy/Mean_grad/Shape_1"
  input: "train/gradients/cross_entropy/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/cross_entropy/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train/gradients/cross_entropy/Mean_grad/Prod_1"
  op: "Prod"
  input: "train/gradients/cross_entropy/Mean_grad/Shape_2"
  input: "train/gradients/cross_entropy/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/cross_entropy/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/cross_entropy/Mean_grad/Maximum"
  op: "Maximum"
  input: "train/gradients/cross_entropy/Mean_grad/Prod_1"
  input: "train/gradients/cross_entropy/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/cross_entropy/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "train/gradients/cross_entropy/Mean_grad/Prod"
  input: "train/gradients/cross_entropy/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/cross_entropy/Mean_grad/Cast"
  op: "Cast"
  input: "train/gradients/cross_entropy/Mean_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/cross_entropy/Mean_grad/truediv"
  op: "RealDiv"
  input: "train/gradients/cross_entropy/Mean_grad/Tile"
  input: "train/gradients/cross_entropy/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg/Reshape_2_grad/Shape"
  op: "Shape"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/cross_entropy/Mean_grad/truediv"
  input: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/zeros_like"
  op: "ZerosLike"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/ExpandDims"
  op: "ExpandDims"
  input: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg/Reshape_2_grad/Reshape"
  input: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/mul"
  op: "Mul"
  input: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/ExpandDims"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/LogSoftmax"
  op: "LogSoftmax"
  input: "cross_entropy/softmax_cross_entropy_with_logits_sg/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/Neg"
  op: "Neg"
  input: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/LogSoftmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/ExpandDims_1"
  op: "ExpandDims"
  input: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg/Reshape_2_grad/Reshape"
  input: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/mul_1"
  op: "Mul"
  input: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/ExpandDims_1"
  input: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/mul"
  input: "^train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/mul_1"
}
node {
  name: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/mul"
  input: "^train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/mul"
      }
    }
  }
}
node {
  name: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/mul_1"
  input: "^train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/mul_1"
      }
    }
  }
}
node {
  name: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg/Reshape_grad/Shape"
  op: "Shape"
  input: "Output-Layer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg/Reshape_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg_grad/tuple/control_dependency"
  input: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/Output-Layer/add_grad/Shape"
  op: "Shape"
  input: "Output-Layer/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/Output-Layer/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "train/gradients/Output-Layer/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/Output-Layer/add_grad/Shape"
  input: "train/gradients/Output-Layer/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/Output-Layer/add_grad/Sum"
  op: "Sum"
  input: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg/Reshape_grad/Reshape"
  input: "train/gradients/Output-Layer/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/Output-Layer/add_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/Output-Layer/add_grad/Sum"
  input: "train/gradients/Output-Layer/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/Output-Layer/add_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/cross_entropy/softmax_cross_entropy_with_logits_sg/Reshape_grad/Reshape"
  input: "train/gradients/Output-Layer/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/Output-Layer/add_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/Output-Layer/add_grad/Sum_1"
  input: "train/gradients/Output-Layer/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/Output-Layer/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/Output-Layer/add_grad/Reshape"
  input: "^train/gradients/Output-Layer/add_grad/Reshape_1"
}
node {
  name: "train/gradients/Output-Layer/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/Output-Layer/add_grad/Reshape"
  input: "^train/gradients/Output-Layer/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/Output-Layer/add_grad/Reshape"
      }
    }
  }
}
node {
  name: "train/gradients/Output-Layer/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/Output-Layer/add_grad/Reshape_1"
  input: "^train/gradients/Output-Layer/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/Output-Layer/add_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "train/gradients/Output-Layer/MatMul_grad/MatMul"
  op: "MatMul"
  input: "train/gradients/Output-Layer/add_grad/tuple/control_dependency"
  input: "W_o/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "train/gradients/Output-Layer/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "LSTM-Layer/lstm/rnn/while/Exit_4"
  input: "train/gradients/Output-Layer/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/Output-Layer/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/Output-Layer/MatMul_grad/MatMul"
  input: "^train/gradients/Output-Layer/MatMul_grad/MatMul_1"
}
node {
  name: "train/gradients/Output-Layer/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/Output-Layer/MatMul_grad/MatMul"
  input: "^train/gradients/Output-Layer/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/Output-Layer/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "train/gradients/Output-Layer/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/Output-Layer/MatMul_grad/MatMul_1"
  input: "^train/gradients/Output-Layer/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/Output-Layer/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "train/gradients/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "LSTM-Layer/lstm/rnn/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "train/gradients/Output-Layer/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "train/gradients/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "train/gradients/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/Exit_4_grad/b_exit"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/Exit_3_grad/b_exit"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/Switch_4_grad/b_switch"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/Switch_4_grad/b_switch"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/Merge_4_grad/Switch"
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/Merge_4_grad/Switch"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/Switch_4_grad/b_switch"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/Merge_4_grad/Switch:1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/Switch_4_grad/b_switch"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/Switch_3_grad/b_switch"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/Merge_3_grad/Switch"
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/Merge_3_grad/Switch"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/Merge_3_grad/Switch:1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/Merge_4_grad/tuple/control_dependency_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm/rnn/lstm_cell/projection/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul_1/StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/Merge_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul_1/Const"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul_1/Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul_1/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul_1/Enter"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul_1/b_sync"
  op: "ControlTrigger"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul_1/StackPopV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/StackPopV2_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul/StackPopV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul_1/StackPopV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Mul/StackPopV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul/StackPopV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul_1/StackPopV2"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul_1"
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Shape"
  op: "Shape"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Shape_1"
  op: "Shape"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Shape_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul"
  op: "Mul"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/tuple/control_dependency"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul/Const"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul/Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul/Enter"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/Tanh_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Sum"
  op: "Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul_1/StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul_1/Const"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul_1/Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul_1/Enter"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid_2"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Sum_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Reshape"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Reshape_1"
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Reshape"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Reshape"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Reshape_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1/Enter_grad/b_acc_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1/Enter_grad/b_acc_2"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1/Enter_grad/Switch:1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul_1/StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/Mul/StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_5_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/Shape"
  op: "Shape"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/Shape_1"
  op: "Shape"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/Shape_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/Sum"
  op: "Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/Sum_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/Reshape"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/Reshape_1"
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/Reshape"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/Reshape"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/Reshape_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Shape"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Shape_1"
  op: "Shape"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Shape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Shape_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Mul"
  op: "Mul"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/tuple/control_dependency_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Mul/Const"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/lstm_cell/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Mul/Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/lstm_cell/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Mul/Enter"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/add_3"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Sum"
  op: "Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Mul"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Mul_1/Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Mul_1/Enter"
  op: "Enter"
  input: "lstm/rnn/lstm_cell/w_o_diag/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Mul_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Sum_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Reshape"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Reshape_1"
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Reshape"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Reshape"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Reshape_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4/Enter_grad/b_acc_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4/Enter_grad/Switch"
  op: "Switch"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4/Enter_grad/b_acc_2"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4/Enter_grad/Add"
  op: "Add"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4/Enter_grad/Switch:1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/AddN"
  op: "AddN"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/Merge_3_grad/tuple/control_dependency_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/Tanh_1_grad/TanhGrad"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/Shape"
  op: "Shape"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/Shape_1"
  op: "Shape"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/Shape_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/Sum"
  op: "Sum"
  input: "train/gradients/AddN"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/AddN"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/Sum_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/Reshape"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/Reshape_1"
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/Reshape"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/Reshape"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/Reshape_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Shape"
  op: "Shape"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Shape_1"
  op: "Shape"
  input: "LSTM-Layer/lstm/rnn/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Shape_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul"
  op: "Mul"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/tuple/control_dependency"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul/Const"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul/Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul/Enter"
  input: "LSTM-Layer/lstm/rnn/while/Identity_3"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul_1/Const"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul_1/Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Sum_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Reshape"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Reshape"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Reshape_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Shape"
  op: "Shape"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Shape_1"
  op: "Shape"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Shape_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul"
  op: "Mul"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/tuple/control_dependency_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul/Const"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul/f_acc"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul/Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul/Enter"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/Tanh"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Sum"
  op: "Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul_1/StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul_1/Const"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul_1/Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul_1/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul_1/Enter"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Sum_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Reshape"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Reshape_1"
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Reshape"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Reshape"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Reshape_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul_1/StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/Mul/StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/Shape"
  op: "Shape"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/Shape_1"
  op: "Shape"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/Shape_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/Sum_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/Reshape"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/Reshape"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/Reshape_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/Shape"
  op: "Shape"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/Shape_1"
  op: "Shape"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/Shape_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/Sum"
  op: "Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/Sum_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/Reshape"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/Reshape_1"
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/Reshape"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/Reshape_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/Shape"
  op: "Shape"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/Sum_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/Reshape"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/Reshape_1"
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/Reshape"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/Reshape"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/Reshape_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Shape"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Shape_1"
  op: "Shape"
  input: "LSTM-Layer/lstm/rnn/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Shape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Shape_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Mul"
  op: "Mul"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Mul"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Mul_1/Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "lstm/rnn/lstm_cell/w_f_diag/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Mul_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Sum_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Reshape"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Reshape"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Reshape_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Shape"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Shape_1"
  op: "Shape"
  input: "LSTM-Layer/lstm/rnn/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Shape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Shape_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Mul"
  op: "Mul"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/tuple/control_dependency_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Mul"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Mul_1"
  op: "Mul"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "lstm/rnn/lstm_cell/w_i_diag/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Mul_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Sum_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Reshape"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Reshape"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Reshape_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_2_grad/tuple/control_dependency"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/Tanh_grad/TanhGrad"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_grad/tuple/control_dependency"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/add_4_grad/tuple/control_dependency"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul/Enter_grad/b_acc_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul/Enter_grad/Switch"
  op: "Switch"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul/Enter_grad/b_acc_2"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul/Enter_grad/Add"
  op: "Add"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul/Enter_grad/Switch:1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2/Enter_grad/b_acc_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2/Enter_grad/Switch"
  op: "Switch"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2/Enter_grad/b_acc_2"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2/Enter_grad/Add"
  op: "Add"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2/Enter_grad/Switch:1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/AddN_1"
  op: "AddN"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_grad/tuple/control_dependency_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/split_grad/concat"
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/split_grad/concat"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/split_grad/concat"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "train/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm/rnn/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "LSTM-Layer/lstm/rnn/while/lstm_cell/concat"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/MatMul"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/MatMul"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/MatMul_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/Const"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/Const"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/Shape"
  op: "Shape"
  input: "LSTM-Layer/lstm/rnn/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN"
  op: "ShapeN"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/Const"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/Enter"
  input: "LSTM-Layer/lstm/rnn/while/TensorArrayReadV3"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/Const_1"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/Identity_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/Const_1"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM-Layer/lstm/rnn/while/Identity_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/Enter_1"
  input: "LSTM-Layer/lstm/rnn/while/Identity_4"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/StackPopV2_1/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/mod"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ConcatOffset"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ConcatOffset:1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/Slice"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/Slice_1"
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/Slice"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/Slice"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/Slice_1"
  input: "^train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/Slice_1"
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 36
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/LSTM-Layer/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/LSTM-Layer/lstm/rnn/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/beta1_power/initial_value"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "train/beta1_power"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/beta1_power/Assign"
  op: "Assign"
  input: "train/beta1_power"
  input: "train/beta1_power/initial_value"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/beta1_power/read"
  op: "Identity"
  input: "train/beta1_power"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
}
node {
  name: "train/beta2_power/initial_value"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "train/beta2_power"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/beta2_power/Assign"
  op: "Assign"
  input: "train/beta2_power"
  input: "train/beta2_power/initial_value"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/beta2_power/read"
  op: "Identity"
  input: "train/beta2_power"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 36
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/kernel/Adam"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 36
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/kernel/Adam"
  input: "lstm/rnn/lstm_cell/kernel/Adam/Initializer/zeros"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "lstm/rnn/lstm_cell/kernel/Adam"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 36
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 36
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/kernel/Adam_1"
  input: "lstm/rnn/lstm_cell/kernel/Adam_1/Initializer/zeros"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "lstm/rnn/lstm_cell/kernel/Adam_1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/bias/Adam"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/bias/Adam"
  input: "lstm/rnn/lstm_cell/bias/Adam/Initializer/zeros"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "lstm/rnn/lstm_cell/bias/Adam"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/bias"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/bias/Adam_1"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/bias/Adam_1"
  input: "lstm/rnn/lstm_cell/bias/Adam_1/Initializer/zeros"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "lstm/rnn/lstm_cell/bias/Adam_1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/bias"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_f_diag/Adam/Initializer/zeros"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_f_diag"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_f_diag/Adam"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_f_diag"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_f_diag/Adam/Assign"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/w_f_diag/Adam"
  input: "lstm/rnn/lstm_cell/w_f_diag/Adam/Initializer/zeros"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_f_diag"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_f_diag/Adam/read"
  op: "Identity"
  input: "lstm/rnn/lstm_cell/w_f_diag/Adam"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_f_diag"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_f_diag/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_f_diag"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_f_diag/Adam_1"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_f_diag"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_f_diag/Adam_1/Assign"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/w_f_diag/Adam_1"
  input: "lstm/rnn/lstm_cell/w_f_diag/Adam_1/Initializer/zeros"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_f_diag"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_f_diag/Adam_1/read"
  op: "Identity"
  input: "lstm/rnn/lstm_cell/w_f_diag/Adam_1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_f_diag"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_i_diag/Adam/Initializer/zeros"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_i_diag"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_i_diag/Adam"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_i_diag"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_i_diag/Adam/Assign"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/w_i_diag/Adam"
  input: "lstm/rnn/lstm_cell/w_i_diag/Adam/Initializer/zeros"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_i_diag"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_i_diag/Adam/read"
  op: "Identity"
  input: "lstm/rnn/lstm_cell/w_i_diag/Adam"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_i_diag"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_i_diag/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_i_diag"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_i_diag/Adam_1"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_i_diag"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_i_diag/Adam_1/Assign"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/w_i_diag/Adam_1"
  input: "lstm/rnn/lstm_cell/w_i_diag/Adam_1/Initializer/zeros"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_i_diag"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_i_diag/Adam_1/read"
  op: "Identity"
  input: "lstm/rnn/lstm_cell/w_i_diag/Adam_1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_i_diag"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_o_diag/Adam/Initializer/zeros"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_o_diag"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_o_diag/Adam"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_o_diag"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_o_diag/Adam/Assign"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/w_o_diag/Adam"
  input: "lstm/rnn/lstm_cell/w_o_diag/Adam/Initializer/zeros"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_o_diag"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_o_diag/Adam/read"
  op: "Identity"
  input: "lstm/rnn/lstm_cell/w_o_diag/Adam"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_o_diag"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_o_diag/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_o_diag"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_o_diag/Adam_1"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_o_diag"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_o_diag/Adam_1/Assign"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/w_o_diag/Adam_1"
  input: "lstm/rnn/lstm_cell/w_o_diag/Adam_1/Initializer/zeros"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_o_diag"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/w_o_diag/Adam_1/read"
  op: "Identity"
  input: "lstm/rnn/lstm_cell/w_o_diag/Adam_1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_o_diag"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/projection/kernel/Adam/Initializer/zeros"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/projection/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/projection/kernel/Adam"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/projection/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/projection/kernel/Adam/Assign"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/projection/kernel/Adam"
  input: "lstm/rnn/lstm_cell/projection/kernel/Adam/Initializer/zeros"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/projection/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/projection/kernel/Adam/read"
  op: "Identity"
  input: "lstm/rnn/lstm_cell/projection/kernel/Adam"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/projection/kernel"
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/projection/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/projection/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/projection/kernel/Adam_1"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/projection/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/projection/kernel/Adam_1/Assign"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/projection/kernel/Adam_1"
  input: "lstm/rnn/lstm_cell/projection/kernel/Adam_1/Initializer/zeros"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/projection/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm/rnn/lstm_cell/projection/kernel/Adam_1/read"
  op: "Identity"
  input: "lstm/rnn/lstm_cell/projection/kernel/Adam_1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/projection/kernel"
      }
    }
  }
}
node {
  name: "W_o/Adam/Initializer/zeros"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "W_o/Adam"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "W_o/Adam/Assign"
  op: "Assign"
  input: "W_o/Adam"
  input: "W_o/Adam/Initializer/zeros"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "W_o/Adam/read"
  op: "Identity"
  input: "W_o/Adam"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
}
node {
  name: "W_o/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "W_o/Adam_1"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "W_o/Adam_1/Assign"
  op: "Assign"
  input: "W_o/Adam_1"
  input: "W_o/Adam_1/Initializer/zeros"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "W_o/Adam_1/read"
  op: "Identity"
  input: "W_o/Adam_1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
}
node {
  name: "b_o/Adam/Initializer/zeros"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b_o"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "b_o/Adam"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b_o"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "b_o/Adam/Assign"
  op: "Assign"
  input: "b_o/Adam"
  input: "b_o/Adam/Initializer/zeros"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b_o"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "b_o/Adam/read"
  op: "Identity"
  input: "b_o/Adam"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b_o"
      }
    }
  }
}
node {
  name: "b_o/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b_o"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "b_o/Adam_1"
  op: "VariableV2"
  device: "/device:GPU:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b_o"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "b_o/Adam_1/Assign"
  op: "Assign"
  input: "b_o/Adam_1"
  input: "b_o/Adam_1/Initializer/zeros"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b_o"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "b_o/Adam_1/read"
  op: "Identity"
  input: "b_o/Adam_1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b_o"
      }
    }
  }
}
node {
  name: "train/Adam/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "train/Adam/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "train/Adam/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "train/Adam/update_lstm/rnn/lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "lstm/rnn/lstm_cell/kernel"
  input: "lstm/rnn/lstm_cell/kernel/Adam"
  input: "lstm/rnn/lstm_cell/kernel/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/learning_rate_input"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/update_lstm/rnn/lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "lstm/rnn/lstm_cell/bias"
  input: "lstm/rnn/lstm_cell/bias/Adam"
  input: "lstm/rnn/lstm_cell/bias/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/learning_rate_input"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/update_lstm/rnn/lstm_cell/w_f_diag/ApplyAdam"
  op: "ApplyAdam"
  input: "lstm/rnn/lstm_cell/w_f_diag"
  input: "lstm/rnn/lstm_cell/w_f_diag/Adam"
  input: "lstm/rnn/lstm_cell/w_f_diag/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/learning_rate_input"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul/Enter_grad/b_acc_3"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_f_diag"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/update_lstm/rnn/lstm_cell/w_i_diag/ApplyAdam"
  op: "ApplyAdam"
  input: "lstm/rnn/lstm_cell/w_i_diag"
  input: "lstm/rnn/lstm_cell/w_i_diag/Adam"
  input: "lstm/rnn/lstm_cell/w_i_diag/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/learning_rate_input"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_2/Enter_grad/b_acc_3"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_i_diag"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/update_lstm/rnn/lstm_cell/w_o_diag/ApplyAdam"
  op: "ApplyAdam"
  input: "lstm/rnn/lstm_cell/w_o_diag"
  input: "lstm/rnn/lstm_cell/w_o_diag/Adam"
  input: "lstm/rnn/lstm_cell/w_o_diag/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/learning_rate_input"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/mul_4/Enter_grad/b_acc_3"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_o_diag"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/update_lstm/rnn/lstm_cell/projection/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "lstm/rnn/lstm_cell/projection/kernel"
  input: "lstm/rnn/lstm_cell/projection/kernel/Adam"
  input: "lstm/rnn/lstm_cell/projection/kernel/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/learning_rate_input"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/LSTM-Layer/lstm/rnn/while/lstm_cell/MatMul_1/Enter_grad/b_acc_3"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/projection/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/update_W_o/ApplyAdam"
  op: "ApplyAdam"
  input: "W_o"
  input: "W_o/Adam"
  input: "W_o/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/learning_rate_input"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/Output-Layer/MatMul_grad/tuple/control_dependency_1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/update_b_o/ApplyAdam"
  op: "ApplyAdam"
  input: "b_o"
  input: "b_o/Adam"
  input: "b_o/Adam_1"
  input: "train/beta1_power/read"
  input: "train/beta2_power/read"
  input: "train/learning_rate_input"
  input: "train/Adam/beta1"
  input: "train/Adam/beta2"
  input: "train/Adam/epsilon"
  input: "train/gradients/Output-Layer/add_grad/tuple/control_dependency_1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b_o"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train/Adam/mul"
  op: "Mul"
  input: "train/beta1_power/read"
  input: "train/Adam/beta1"
  input: "^train/Adam/update_W_o/ApplyAdam"
  input: "^train/Adam/update_b_o/ApplyAdam"
  input: "^train/Adam/update_lstm/rnn/lstm_cell/bias/ApplyAdam"
  input: "^train/Adam/update_lstm/rnn/lstm_cell/kernel/ApplyAdam"
  input: "^train/Adam/update_lstm/rnn/lstm_cell/projection/kernel/ApplyAdam"
  input: "^train/Adam/update_lstm/rnn/lstm_cell/w_f_diag/ApplyAdam"
  input: "^train/Adam/update_lstm/rnn/lstm_cell/w_i_diag/ApplyAdam"
  input: "^train/Adam/update_lstm/rnn/lstm_cell/w_o_diag/ApplyAdam"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
}
node {
  name: "train/Adam/Assign"
  op: "Assign"
  input: "train/beta1_power"
  input: "train/Adam/mul"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/Adam/mul_1"
  op: "Mul"
  input: "train/beta2_power/read"
  input: "train/Adam/beta2"
  input: "^train/Adam/update_W_o/ApplyAdam"
  input: "^train/Adam/update_b_o/ApplyAdam"
  input: "^train/Adam/update_lstm/rnn/lstm_cell/bias/ApplyAdam"
  input: "^train/Adam/update_lstm/rnn/lstm_cell/kernel/ApplyAdam"
  input: "^train/Adam/update_lstm/rnn/lstm_cell/projection/kernel/ApplyAdam"
  input: "^train/Adam/update_lstm/rnn/lstm_cell/w_f_diag/ApplyAdam"
  input: "^train/Adam/update_lstm/rnn/lstm_cell/w_i_diag/ApplyAdam"
  input: "^train/Adam/update_lstm/rnn/lstm_cell/w_o_diag/ApplyAdam"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
}
node {
  name: "train/Adam/Assign_1"
  op: "Assign"
  input: "train/beta2_power"
  input: "train/Adam/mul_1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train/Adam/update"
  op: "NoOp"
  input: "^train/Adam/Assign"
  input: "^train/Adam/Assign_1"
  input: "^train/Adam/update_W_o/ApplyAdam"
  input: "^train/Adam/update_b_o/ApplyAdam"
  input: "^train/Adam/update_lstm/rnn/lstm_cell/bias/ApplyAdam"
  input: "^train/Adam/update_lstm/rnn/lstm_cell/kernel/ApplyAdam"
  input: "^train/Adam/update_lstm/rnn/lstm_cell/projection/kernel/ApplyAdam"
  input: "^train/Adam/update_lstm/rnn/lstm_cell/w_f_diag/ApplyAdam"
  input: "^train/Adam/update_lstm/rnn/lstm_cell/w_i_diag/ApplyAdam"
  input: "^train/Adam/update_lstm/rnn/lstm_cell/w_o_diag/ApplyAdam"
  device: "/device:GPU:1"
}
node {
  name: "train/Adam/value"
  op: "Const"
  input: "^train/Adam/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "train/Adam"
  op: "AssignAdd"
  input: "global_step"
  input: "train/Adam/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/train_op/CheckNumerics"
  op: "CheckNumerics"
  input: "cross_entropy/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "message"
    value {
      s: "LossTensor is inf or nan"
    }
  }
}
node {
  name: "train/train_op/control_dependency"
  op: "Identity"
  input: "train/train_op/CheckNumerics"
  input: "^train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/train_op/CheckNumerics"
      }
    }
  }
}
node {
  name: "ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ArgMax"
  op: "ArgMax"
  input: "Output-Layer/add"
  input: "ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ArgMax_1"
  op: "ArgMax"
  input: "groundtruth_input"
  input: "ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Equal"
  op: "Equal"
  input: "ArgMax"
  input: "ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "confusion_matrix/assert_non_negative/Const"
  input: "ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/LessEqual"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (ArgMax_1:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/All"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (ArgMax_1:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/All"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_non_negative/assert_less_equal/All"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "ArgMax_1"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ArgMax_1"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "confusion_matrix/control_dependency"
  op: "Identity"
  input: "ArgMax_1"
  input: "^confusion_matrix/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ArgMax_1"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "confusion_matrix/assert_non_negative_1/Const"
  input: "ArgMax"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/All"
  op: "All"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/LessEqual"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (ArgMax:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/All"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` contains negative values"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (ArgMax:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/All"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_non_negative_1/assert_less_equal/All"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "ArgMax"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ArgMax"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "confusion_matrix/control_dependency_1"
  op: "Identity"
  input: "ArgMax"
  input: "^confusion_matrix/assert_non_negative_1/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ArgMax"
      }
    }
  }
}
node {
  name: "confusion_matrix/Cast/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "confusion_matrix/Cast"
  op: "Cast"
  input: "confusion_matrix/Cast/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Less"
  op: "Less"
  input: "confusion_matrix/control_dependency"
  input: "confusion_matrix/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/All"
  op: "All"
  input: "confusion_matrix/assert_less/Less"
  input: "confusion_matrix/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix/control_dependency:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (confusion_matrix/Cast:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix/assert_less/All"
  input: "confusion_matrix/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix/assert_less/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix/assert_less/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix/assert_less/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_less/Assert/AssertGuard/switch_t"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`labels` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix/control_dependency:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^confusion_matrix/assert_less/Assert/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (confusion_matrix/Cast:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/Switch_1"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/data_4"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix/assert_less/All"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_less/All"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "confusion_matrix/control_dependency"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ArgMax_1"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "confusion_matrix/Cast"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/Cast"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix/assert_less/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_less/Assert/AssertGuard/switch_f"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix/assert_less/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "confusion_matrix/control_dependency_2"
  op: "Identity"
  input: "confusion_matrix/control_dependency"
  input: "^confusion_matrix/assert_less/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ArgMax_1"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Less"
  op: "Less"
  input: "confusion_matrix/control_dependency_1"
  input: "confusion_matrix/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/All"
  op: "All"
  input: "confusion_matrix/assert_less_1/Less"
  input: "confusion_matrix/assert_less_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix/control_dependency_1:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (confusion_matrix/Cast:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "confusion_matrix/assert_less_1/All"
  input: "confusion_matrix/assert_less_1/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "confusion_matrix/assert_less_1/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^confusion_matrix/assert_less_1/Assert/AssertGuard/switch_t"
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/switch_t"
  input: "^confusion_matrix/assert_less_1/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_less_1/Assert/AssertGuard/switch_t"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^confusion_matrix/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "`predictions` out of bound"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^confusion_matrix/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x < y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^confusion_matrix/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (confusion_matrix/control_dependency_1:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^confusion_matrix/assert_less_1/Assert/AssertGuard/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (confusion_matrix/Cast:0) = "
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/Switch"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/data_0"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/data_1"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/data_2"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/Switch_1"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/data_4"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "confusion_matrix/assert_less_1/All"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_less_1/All"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "confusion_matrix/control_dependency_1"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ArgMax"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "confusion_matrix/Cast"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/Cast"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/switch_f"
  input: "^confusion_matrix/assert_less_1/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@confusion_matrix/assert_less_1/Assert/AssertGuard/switch_f"
      }
    }
  }
}
node {
  name: "confusion_matrix/assert_less_1/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/control_dependency_1"
  input: "confusion_matrix/assert_less_1/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "confusion_matrix/control_dependency_3"
  op: "Identity"
  input: "confusion_matrix/control_dependency_1"
  input: "^confusion_matrix/assert_less_1/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ArgMax"
      }
    }
  }
}
node {
  name: "confusion_matrix/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "confusion_matrix/stack_1"
  op: "Pack"
  input: "confusion_matrix/control_dependency_2"
  input: "confusion_matrix/control_dependency_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "confusion_matrix/ones_like/Shape"
  op: "Shape"
  input: "confusion_matrix/control_dependency_3"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "confusion_matrix/ones_like/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "confusion_matrix/ones_like"
  op: "Fill"
  input: "confusion_matrix/ones_like/Shape"
  input: "confusion_matrix/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "confusion_matrix/ToInt64"
  op: "Cast"
  input: "confusion_matrix/stack"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "confusion_matrix/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "confusion_matrix/zeros"
  op: "Fill"
  input: "confusion_matrix/stack"
  input: "confusion_matrix/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "confusion_matrix/SparseTensorDenseAdd"
  op: "SparseTensorDenseAdd"
  input: "confusion_matrix/stack_1"
  input: "confusion_matrix/ones_like"
  input: "confusion_matrix/ToInt64"
  input: "confusion_matrix/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "Cast"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "accuracy/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "accuracy"
      }
    }
  }
}
node {
  name: "accuracy"
  op: "ScalarSummary"
  input: "accuracy/tags"
  input: "Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "global_step/read"
  input: "add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "global_step"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 27
          }
        }
        string_val: "W_o"
        string_val: "W_o/Adam"
        string_val: "W_o/Adam_1"
        string_val: "b_o"
        string_val: "b_o/Adam"
        string_val: "b_o/Adam_1"
        string_val: "global_step"
        string_val: "lstm/rnn/lstm_cell/bias"
        string_val: "lstm/rnn/lstm_cell/bias/Adam"
        string_val: "lstm/rnn/lstm_cell/bias/Adam_1"
        string_val: "lstm/rnn/lstm_cell/kernel"
        string_val: "lstm/rnn/lstm_cell/kernel/Adam"
        string_val: "lstm/rnn/lstm_cell/kernel/Adam_1"
        string_val: "lstm/rnn/lstm_cell/projection/kernel"
        string_val: "lstm/rnn/lstm_cell/projection/kernel/Adam"
        string_val: "lstm/rnn/lstm_cell/projection/kernel/Adam_1"
        string_val: "lstm/rnn/lstm_cell/w_f_diag"
        string_val: "lstm/rnn/lstm_cell/w_f_diag/Adam"
        string_val: "lstm/rnn/lstm_cell/w_f_diag/Adam_1"
        string_val: "lstm/rnn/lstm_cell/w_i_diag"
        string_val: "lstm/rnn/lstm_cell/w_i_diag/Adam"
        string_val: "lstm/rnn/lstm_cell/w_i_diag/Adam_1"
        string_val: "lstm/rnn/lstm_cell/w_o_diag"
        string_val: "lstm/rnn/lstm_cell/w_o_diag/Adam"
        string_val: "lstm/rnn/lstm_cell/w_o_diag/Adam_1"
        string_val: "train/beta1_power"
        string_val: "train/beta2_power"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 27
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "W_o"
  input: "W_o/Adam"
  input: "W_o/Adam_1"
  input: "b_o"
  input: "b_o/Adam"
  input: "b_o/Adam_1"
  input: "global_step"
  input: "lstm/rnn/lstm_cell/bias"
  input: "lstm/rnn/lstm_cell/bias/Adam"
  input: "lstm/rnn/lstm_cell/bias/Adam_1"
  input: "lstm/rnn/lstm_cell/kernel"
  input: "lstm/rnn/lstm_cell/kernel/Adam"
  input: "lstm/rnn/lstm_cell/kernel/Adam_1"
  input: "lstm/rnn/lstm_cell/projection/kernel"
  input: "lstm/rnn/lstm_cell/projection/kernel/Adam"
  input: "lstm/rnn/lstm_cell/projection/kernel/Adam_1"
  input: "lstm/rnn/lstm_cell/w_f_diag"
  input: "lstm/rnn/lstm_cell/w_f_diag/Adam"
  input: "lstm/rnn/lstm_cell/w_f_diag/Adam_1"
  input: "lstm/rnn/lstm_cell/w_i_diag"
  input: "lstm/rnn/lstm_cell/w_i_diag/Adam"
  input: "lstm/rnn/lstm_cell/w_i_diag/Adam_1"
  input: "lstm/rnn/lstm_cell/w_o_diag"
  input: "lstm/rnn/lstm_cell/w_o_diag/Adam"
  input: "lstm/rnn/lstm_cell/w_o_diag/Adam_1"
  input: "train/beta1_power"
  input: "train/beta2_power"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 27
          }
        }
        string_val: "W_o"
        string_val: "W_o/Adam"
        string_val: "W_o/Adam_1"
        string_val: "b_o"
        string_val: "b_o/Adam"
        string_val: "b_o/Adam_1"
        string_val: "global_step"
        string_val: "lstm/rnn/lstm_cell/bias"
        string_val: "lstm/rnn/lstm_cell/bias/Adam"
        string_val: "lstm/rnn/lstm_cell/bias/Adam_1"
        string_val: "lstm/rnn/lstm_cell/kernel"
        string_val: "lstm/rnn/lstm_cell/kernel/Adam"
        string_val: "lstm/rnn/lstm_cell/kernel/Adam_1"
        string_val: "lstm/rnn/lstm_cell/projection/kernel"
        string_val: "lstm/rnn/lstm_cell/projection/kernel/Adam"
        string_val: "lstm/rnn/lstm_cell/projection/kernel/Adam_1"
        string_val: "lstm/rnn/lstm_cell/w_f_diag"
        string_val: "lstm/rnn/lstm_cell/w_f_diag/Adam"
        string_val: "lstm/rnn/lstm_cell/w_f_diag/Adam_1"
        string_val: "lstm/rnn/lstm_cell/w_i_diag"
        string_val: "lstm/rnn/lstm_cell/w_i_diag/Adam"
        string_val: "lstm/rnn/lstm_cell/w_i_diag/Adam_1"
        string_val: "lstm/rnn/lstm_cell/w_o_diag"
        string_val: "lstm/rnn/lstm_cell/w_o_diag/Adam"
        string_val: "lstm/rnn/lstm_cell/w_o_diag/Adam_1"
        string_val: "train/beta1_power"
        string_val: "train/beta2_power"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 27
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "W_o"
  input: "save/RestoreV2"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "W_o/Adam"
  input: "save/RestoreV2:1"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "W_o/Adam_1"
  input: "save/RestoreV2:2"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "b_o"
  input: "save/RestoreV2:3"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b_o"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "b_o/Adam"
  input: "save/RestoreV2:4"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b_o"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "b_o/Adam_1"
  input: "save/RestoreV2:5"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@b_o"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/bias"
  input: "save/RestoreV2:7"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/bias/Adam"
  input: "save/RestoreV2:8"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/bias/Adam_1"
  input: "save/RestoreV2:9"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/kernel"
  input: "save/RestoreV2:10"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/kernel/Adam"
  input: "save/RestoreV2:11"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2:12"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/projection/kernel"
  input: "save/RestoreV2:13"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/projection/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/projection/kernel/Adam"
  input: "save/RestoreV2:14"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/projection/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/projection/kernel/Adam_1"
  input: "save/RestoreV2:15"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/projection/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/w_f_diag"
  input: "save/RestoreV2:16"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_f_diag"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/w_f_diag/Adam"
  input: "save/RestoreV2:17"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_f_diag"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/w_f_diag/Adam_1"
  input: "save/RestoreV2:18"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_f_diag"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/w_i_diag"
  input: "save/RestoreV2:19"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_i_diag"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/w_i_diag/Adam"
  input: "save/RestoreV2:20"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_i_diag"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/w_i_diag/Adam_1"
  input: "save/RestoreV2:21"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_i_diag"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/w_o_diag"
  input: "save/RestoreV2:22"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_o_diag"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/w_o_diag/Adam"
  input: "save/RestoreV2:23"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_o_diag"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "lstm/rnn/lstm_cell/w_o_diag/Adam_1"
  input: "save/RestoreV2:24"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm/rnn/lstm_cell/w_o_diag"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "train/beta1_power"
  input: "save/RestoreV2:25"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "train/beta2_power"
  input: "save/RestoreV2:26"
  device: "/device:GPU:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@W_o"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all/NoOp"
  op: "NoOp"
  input: "^save/Assign_6"
}
node {
  name: "save/restore_all/NoOp_1"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_2"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  device: "/device:GPU:1"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_all/NoOp"
  input: "^save/restore_all/NoOp_1"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "cross_entropy_1"
  input: "accuracy"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
}
node {
  name: "init/NoOp"
  op: "NoOp"
  input: "^global_step/Assign"
}
node {
  name: "init/NoOp_1"
  op: "NoOp"
  input: "^W_o/Adam/Assign"
  input: "^W_o/Adam_1/Assign"
  input: "^W_o/Assign"
  input: "^b_o/Adam/Assign"
  input: "^b_o/Adam_1/Assign"
  input: "^b_o/Assign"
  input: "^lstm/rnn/lstm_cell/bias/Adam/Assign"
  input: "^lstm/rnn/lstm_cell/bias/Adam_1/Assign"
  input: "^lstm/rnn/lstm_cell/bias/Assign"
  input: "^lstm/rnn/lstm_cell/kernel/Adam/Assign"
  input: "^lstm/rnn/lstm_cell/kernel/Adam_1/Assign"
  input: "^lstm/rnn/lstm_cell/kernel/Assign"
  input: "^lstm/rnn/lstm_cell/projection/kernel/Adam/Assign"
  input: "^lstm/rnn/lstm_cell/projection/kernel/Adam_1/Assign"
  input: "^lstm/rnn/lstm_cell/projection/kernel/Assign"
  input: "^lstm/rnn/lstm_cell/w_f_diag/Adam/Assign"
  input: "^lstm/rnn/lstm_cell/w_f_diag/Adam_1/Assign"
  input: "^lstm/rnn/lstm_cell/w_f_diag/Assign"
  input: "^lstm/rnn/lstm_cell/w_i_diag/Adam/Assign"
  input: "^lstm/rnn/lstm_cell/w_i_diag/Adam_1/Assign"
  input: "^lstm/rnn/lstm_cell/w_i_diag/Assign"
  input: "^lstm/rnn/lstm_cell/w_o_diag/Adam/Assign"
  input: "^lstm/rnn/lstm_cell/w_o_diag/Adam_1/Assign"
  input: "^lstm/rnn/lstm_cell/w_o_diag/Assign"
  input: "^train/beta1_power/Assign"
  input: "^train/beta2_power/Assign"
  device: "/device:GPU:1"
}
node {
  name: "init"
  op: "NoOp"
  input: "^init/NoOp"
  input: "^init/NoOp_1"
}
node {
  name: "Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "$\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "Shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "Shape_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "Shape_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "Shape_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "Shape_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "Shape_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
versions {
  producer: 27
}
